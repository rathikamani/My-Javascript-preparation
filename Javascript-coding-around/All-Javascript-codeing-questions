
1.artic design (mvc) in react
2.project complex in react?
3.vis dom ? why performance?

1. Program to find longest word in a given sentence ?
function findLongestWord(sentence) {
    let words = sentence.split(" ");
    let longestWord = "";

    for (let word of words) {
        if (word.length > longestWord.length) {
            longestWord = word;
        }
    }

    return longestWord;
}

let sentence = "I am a software devleoper";
console.log("Longest word:", findLongestWord(sentence));

2. How to check whether a string is palindrome or not ?
function isPalindrome(str) {
    str = str.toLowerCase(); // Convert to lowercase to handle case sensitivity
    let reversedStr = str.split("").reverse().join(""); // Reverse the string
    return str === reversedStr;
}

let word = "Anna";
console.log(`Is "${word}" a palindrome?`, isPalindrome(word));

3. Write a program to remove duplicates from an array ?
function removeDuplicates(arr) {
    let uniqueArr = []; // Initialize an empty array to store unique values

    for (let i = 0; i < arr.length; i++) {
        let isDuplicate = false;

        // Check if the element already exists in uniqueArr
        for (let j = 0; j < uniqueArr.length; j++) {
            if (arr[i] === uniqueArr[j]) {
                isDuplicate = true;
                break; // Exit inner loop if duplicate is found
            }
        }

        // If not a duplicate, add it to uniqueArr
        if (!isDuplicate) {
            uniqueArr.push(arr[i]);
        }
    }

    return uniqueArr;
}

let numbers = [1, 2, 3, 2, 4, 5];
console.log("Array without duplicates:", removeDuplicates(numbers));

4. Program to find Reverse of a string without using built-in method ?
function reverseString(str) {
    let reversedStr = ""; // Initialize an empty string to store the reversed result

    // Loop through the string in reverse order
    for (let i = str.length - 1; i >= 0; i--) {
        reversedStr += str[i]; // Append each character to the new string
    }

    return reversedStr;
}

let word = "rathika";
console.log("Reversed string:", reverseString(word));

5. Find the max count of consecutive 1’s in an array ?
6. Find the factorial of given number ?
function factorial(num) {
    if (num === 0 || num === 1) return 1; // Base case: 0! and 1! are 1
    let fact = 1;
    for (let i = 2; i <= num; i++) {
        fact *= i; // Multiply numbers from 2 to num
    }
    return fact;
}

function factorialOfArray(arr) {
    return arr.map(num => factorial(num)); // Compute factorial for each number in the array
}

let numbers = [1, 4, 5, 2, 0, 3];
console.log("Factorials:", factorialOfArray(numbers));

Factorials:
1! = 1
4! = 4 × 3 × 2 × 1 = 24
5! = 5 × 4 × 3 × 2 × 1 = 120
2! = 2 × 1 = 2
0! = 1
3! = 3 × 2 × 1 = 6

7. Given 2 arrays that are sorted [0,3,4,31] and [4,6,30]. Merge them and sort [0,3,4,4,6,30,31] ?
function mergeSortedArrays(arr1, arr2) {
    let mergedArray = [];
    let i = 0, j = 0;

    // Traverse both arrays
    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            mergedArray.push(arr1[i]);
            i++;
        } else {
            mergedArray.push(arr2[j]);
            j++;
        }
    }

    // Add remaining elements from arr1 (if any)
    while (i < arr1.length) {
        mergedArray.push(arr1[i]);
        i++;
    }

    // Add remaining elements from arr2 (if any)
    while (j < arr2.length) {
        mergedArray.push(arr2[j]);
        j++;
    }

    return mergedArray;
}

let arr1 = [0, 3, 4, 31];
let arr2 = [4, 6, 30];

console.log("Merged Sorted Array:", mergeSortedArrays(arr1, arr2));

8. Create a function which will accepts two arrays arr1 and arr2. The function should return true if every value in arr1 has its corresponding value squared in array2. The frequency of values must be same.

function sameFrequency(arr1, arr2) {
    if (arr1.length !== arr2.length) return false; // Lengths must be equal

    let frequencyCounter1 = {};
    let frequencyCounter2 = {};

    // Count frequency of values in arr1
    for (let num of arr1) {
        frequencyCounter1[num] = (frequencyCounter1[num] || 0) + 1;
    }

    // Count frequency of values in arr2
    for (let num of arr2) {
        frequencyCounter2[num] = (frequencyCounter2[num] || 0) + 1;
    }

    // Compare frequency of squared values
    for (let key in frequencyCounter1) {
        let squaredKey = key ** 2;
        if (!(squaredKey in frequencyCounter2)) return false; // Squared value must exist
        if (frequencyCounter2[squaredKey] !== frequencyCounter1[key]) return false; // Frequency must match
    }

    return true;
}

// Example usage:
let arr1 = [1, 2, 3, 2];
let arr2 = [4, 9, 1, 4];

console.log(sameFrequency(arr1, arr2)); // Output: true

Explanation:
Check array lengths – If they don’t match, return false.
Create frequency counters for both arrays:
frequencyCounter1 stores the count of elements in arr1.
frequencyCounter2 stores the count of elements in arr2.
Compare frequencies:
Ensure each value in arr1 has its square in arr2.
Ensure the squared values appear the same number of times.
Return true or false based on the comparison.


or
function sameFrequency(arr1, arr2) {
    return arr1.map(num => num ** 2).sort().toString() === arr2.sort().toString();
}

// Example usage:
console.log(sameFrequency([1, 2, 3, 2], [4, 9, 1, 4])); // true
console.log(sameFrequency([1, 2, 3], [1, 4, 9])); // true
console.log(sameFrequency([1, 2, 3], [1, 4, 8])); // false

Explanation:
Square each element in arr1 using .map(num => num ** 2).
Sort both arrays so they can be compared directly.
Convert them to strings and check if they are equal.

9. Given two strings. Find if one string can be formed by rearranging the letters of other string.
function isAnagram(str1, str2) {
    // If lengths are different, they cannot be anagrams
    if (str1.length !== str2.length) return false;

    // Sort both strings and compare
    return str1.split('').sort().join('') === str2.split('').sort().join('');
}

// Example usage:
console.log(isAnagram("listen", "silent")); // true
console.log(isAnagram("hello", "world"));   // false
console.log(isAnagram("rat", "tar"));       // true
console.log(isAnagram("apple", "papel"));   // true

10. Write logic to get unique objects from below array ?
I/P: [{name: "sai"},{name:"Nang"},{name: "sai"},{name:"Nang"},{name: "111111"}];
O/P: [{name: "sai"},{name:"Nang"}{name: "111111"}

function getUniqueObjects(arr) {
    let uniqueMap = new Map();

    for (let obj of arr) {
        uniqueMap.set(obj.name, obj); // Map stores only unique keys
    }

    return Array.from(uniqueMap.values()); // Convert Map values back to an array
}

let inputArray = [
    { name: "sai" },
    { name: "Nang" },
    { name: "sai" },
    { name: "Nang" },
    { name: "111111" }
];

console.log(getUniqueObjects(inputArray));



11. Write a JavaScript program to find the maximum number in an array.
function findMax(arr) {
    let max = arr[0]; // Assume the first element is the largest

    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i]; // Update max if a larger value is found
        }
    }

    return max;
}

let numbers = [10, 24, 3, 45, 99, 7];
console.log("Maximum Number:", findMax(numbers)); // Output: 99

12. Write a JavaScript function that takes an array of numbers and returns a new array with only the even numbers.
function getEvenNumbers(arr) {
    let evenNumbers = [];
    
    for (let num of arr) {
        if (num % 2 === 0) {
            evenNumbers.push(num);
        }
    }
    
    return evenNumbers;
}

console.log("Even Numbers:", getEvenNumbers(numbers)); // Output: [2, 4, 6, 8, 10]

13. Write a JavaScript function to check if a given number is prime.
function isPrime(num) {
    // Numbers less than 2 are not prime
    if (num < 2) return false;

    // Check divisibility from 2 to the square root of num
    for (let i = 2; i * i <= num; i++) {
        if (num % i === 0) {
            return false; // If num is divisible by i, it's not prime
        }
    }
    
    return true; // If no divisor found, num is prime
}

// Example usage:
console.log(isPrime(2));   // true
console.log(isPrime(17));  // true
console.log(isPrime(18));  // false
console.log(isPrime(29));  // true
console.log(isPrime(1));   // false

14. Write a JavaScript program to find the largest element in a nested array.
[[3, 4, 58], [709, 8, 9, [10, 11]], [111, 2]]

function findLargestInNestedArray(arr) {
    let flattenedArr = flattenArray(arr); // Flatten the nested array
    return Math.max(...flattenedArr); // Find the max element from the flattened array
}

// Helper function to flatten the nested array
function flattenArray(arr) {
    let flat = [];
    
    // Loop through each element
    arr.forEach(item => {
        if (Array.isArray(item)) {
            // If the item is an array, recursively flatten it
            flat = flat.concat(flattenArray(item));
        } else {
            // If its not an array, add it to the flat array
            flat.push(item);
        }
    });
    
    return flat;
}

let nestedArray = [[3, 4, 58], [709, 8, 9, [10, 11]], [111, 2]];
console.log("Largest Element:", findLargestInNestedArray(nestedArray)); // Output: 709


15. Write a JavaScript function that returns the Fibonacci sequence up to a given number of terms.
16. Given a string, write a javascript function to count the occurrences of each character in the string.
function countCharacterOccurrences(str) {
    let charCount = {}; // Object to store character counts

    // Loop through each character in the string
    for (let char of str) {
        // If character exists in object, increment the count
        if (charCount[char]) {
            charCount[char]++;
        } else {
            // Otherwise, set the count to 1
            charCount[char] = 1;
        }
    }

    return charCount;
}

// Example usage:
let inputString = "hello world";
console.log(countCharacterOccurrences(inputString));
// Output: { h: 1, e: 1, l: 3, o: 2, ' ': 1, w: 1, r: 1, d: 1 }

17. Write a javascript function that sorts an array of numbers in ascending order.
function selectionSort(arr) {
    let n = arr.length;

    for (let i = 0; i < n - 1; i++) {
        let minIndex = i;

        // Find the smallest element in the remaining array
        for (let j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }

        // Swap the smallest element with the first element of the unsorted part
        let temp = arr[i];
        arr[i] = arr[minIndex];
        arr[minIndex] = temp;
    }

    return arr;
}

// Example usage:
let numbers = [64, 25, 12, 22, 11];
console.log(selectionSort(numbers)); // Output: [11, 12, 22, 25, 64]

18. Write a javascript function that sorts an array of numbers in descending order.
function selectionSortDescending(arr) {
    let n = arr.length;

    for (let i = 0; i < n - 1; i++) {
        let maxIndex = i;

        // Find the largest element in the remaining array
        for (let j = i + 1; j < n; j++) {
            if (arr[j] > arr[maxIndex]) {
                maxIndex = j;
            }
        }

        // Swap the largest element with the first element of the unsorted part
        let temp = arr[i];
        arr[i] = arr[maxIndex];
        arr[maxIndex] = temp;
    }

    return arr;
}

// Example usage:
let numbers = [64, 25, 12, 22, 11];
console.log(selectionSortDescending(numbers)); // Output: [64, 25, 22, 12, 11]

19. Write a javascript function that reverses the order of words in a sentence without using the built-in reverse() method.
function reverseWords(sentence) {
    let words = sentence.split(" "); // Split sentence into an array of words
    let reversedSentence = "";

    // Manually iterate from the last word to the first word
    for (let i = words.length - 1; i >= 0; i--) {
        reversedSentence += words[i];

        // Add a space between words (except for the last one)
        if (i > 0) {
            reversedSentence += " ";
        }
    }

    return reversedSentence;
}

// Example usage:
let sentence = "Hello world this is JavaScript";
console.log(reverseWords(sentence)); // Output: "JavaScript is this world Hello"


20. Implement a javascript function that flattens a nested array into a single-dimensional array.
function flattenArray(arr) {
    let result = [];

    for (let i = 0; i < arr.length; i++) {
        if (Array.isArray(arr[i])) {
            // Recursively flatten the nested array
            result = result.concat(flattenArray(arr[i]));
        } else {
            // If it's not an array, push the element to result
            result.push(arr[i]);
        }
    }

    return result;
}

// Example usage:
let nestedArray = [1, [2, 3], [4, [5, 6]], 7];
console.log(flattenArray(nestedArray)); // Output: [1, 2, 3, 4, 5, 6, 7]

21. Write a function which converts string input into an object
("a.b.c", "someValue");
{a: {b: {c: "someValue"}}}

function stringToObject(path, value) {
    let keys = path.split("."); // Split the string into an array of keys
    let obj = {}; // Initialize an empty object
    let temp = obj; // Temporary reference to modify the object

    for (let i = 0; i < keys.length - 1; i++) {
        temp[keys[i]] = {}; // Create nested objects
        temp = temp[keys[i]]; // Move deeper
    }

    // Assign the final value to the last key
    temp[keys[keys.length - 1]] = value;

    return obj;
}

// Example usage:
console.log(stringToObject("a.b.c", "someValue"));



https://github.com/jwill9999/JavaScript-Array-Interview-Practice

BofA UI Discussion

Quick introduction
Javascript Interview question – Not librariries
Let and const
Promises – wrote a couple of code
Ajax – piece of code
Ajax headers – piece of code
Array – piece of code
ES6
Array De-structuring
Javascript to access elements
querySelector and querySelectorAll
Event bubbling
Web security principles
Accessibility
Responsive web design
Performance optimization
Grid layout
Media query
HTML
HTML5 latest APIs
Symantic Elements
How develop an application without any responsive css works, like Bootstrap/Tailwind
What is the diff between SASS/CSS
What are the break points for multiple screen sizes from Mobile to laptop